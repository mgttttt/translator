#!/usr/bin/env python3

from argostrain.dataset import *
from argostrain.sbd import *
from argostrain.multilang import *
from argostrain.xml import *

import random
from pathlib import Path

DEBUG = True

# Load data
if DEBUG:
    testdata_source = Path("data") / "testdata_source"
    testdata_target = Path("data") / "testdata_target"
    input_dataset = FileDataset(open(testdata_source), open(testdata_target))
else:
    available_datasets = get_available_datasets()
    # Get Spanish data
    es_data = list(filter(lambda x: x.to_code == "es", available_datasets))
    input_dataset = es_data[0]

input_data_length = len(input_dataset)

# The dataset to use for training
dataset = CompositeDataset(copy_dataset(input_dataset))

# Generate multi-lang
"""
langs_data = [(input_dataset, 'es'), (InvertedDataset(input_dataset), 'en')] 
multilang_dataset = generate_multilang_data(langs_data)
dataset += CompositeDataset(multilang_dataset)
"""

# Generate xml data
tag_dataset = generate_xml_data(dataset, "en", "es")
dataset += tag_dataset

# Generate capitalization data
CAPITAL_RATIO = 0.01
input_copy = copy_dataset(dataset)
capital_length = int(CAPITAL_RATIO * len(input_copy))
all_upper_dataset = TrimmedDataset(input_copy, capital_length)
all_upper_dataset = TransformedDataset(all_upper_dataset, str.upper)
all_lower_dataset = TrimmedDataset(input_copy, capital_length)
all_lower_dataset = TransformedDataset(all_lower_dataset, str.lower)


def random_caps(s):
    to_return = ""
    for c in s:
        caps = random.choice(range(3))
        if caps == 0:
            to_return += c.lower()
        elif caps == 1:
            to_return += c
        else:
            to_return += c.upper()
    return to_return


random_caps_dataset = TrimmedDataset(input_copy, capital_length)
random_caps_dataset = TransformedDataset(random_caps_dataset, random_caps)
all_caps_dataset = (
    CompositeDataset(all_upper_dataset)
    + CompositeDataset(all_lower_dataset)
    + CompositeDataset(random_caps_dataset)
)
dataset += all_caps_dataset

# Generate SBD data
# dataset = generate_sbd_data(dataset)

if DEBUG:
    print(str(dataset))
else:
    export_dataset(dataset)
